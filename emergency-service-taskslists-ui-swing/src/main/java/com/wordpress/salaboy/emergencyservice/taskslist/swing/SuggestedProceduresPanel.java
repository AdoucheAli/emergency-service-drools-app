/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SuggestedProceduresPanel.java
 *
 * Created on Apr 21, 2011, 7:47:07 PM
 */
package com.wordpress.salaboy.emergencyservice.taskslist.swing;

import com.wordpress.salaboy.model.SelectedProcedures;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import org.example.ws_ht.api.TAttachment;
import org.example.ws_ht.api.TAttachmentInfo;
import org.example.ws_ht.api.TStatus;
import org.example.ws_ht.api.TTask;
import org.example.ws_ht.api.TTaskAbstract;
import org.example.ws_ht.api.wsdl.IllegalAccessFault;
import org.example.ws_ht.api.wsdl.IllegalArgumentFault;
import org.example.ws_ht.api.wsdl.IllegalStateFault;
import org.jbpm.task.AccessType;
import org.jbpm.task.Content;
import org.jbpm.task.service.ContentData;

/**
 *
 * @author salaboy
 */
public class SuggestedProceduresPanel extends javax.swing.JPanel {

    private ControlSuggestedProceduresPanel parent;
    private List<String> suggestedProcedures;
    private Long emergencyId;
    private String taskId;
    /** Creates new form SuggestedProceduresPanel */
    public SuggestedProceduresPanel(ControlSuggestedProceduresPanel parent, String id) {
        this.parent = parent;
        this.taskId = id;
        initComponents();
        configurePanel();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        emergencyTimejTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        emergencyTypejTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        suggestedProceduresjList = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();
        selectProcedurejButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        emergencyLocationjTextField = new javax.swing.JTextField();
        nroOfPeoplejTextField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        patientAgejTextField = new javax.swing.JTextField();
        patientGenderjTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        taskActionjButton = new javax.swing.JButton();

        jLabel1.setText("Suggested Procedures for Emergency");

        emergencyTimejTextField.setEditable(false);

        jLabel2.setText("Location:");

        jLabel3.setText("Type:");

        emergencyTypejTextField.setEditable(false);

        jLabel4.setText("People Involved (Aprox):");

        suggestedProceduresjList.setModel(new DefaultListModel());
        jScrollPane2.setViewportView(suggestedProceduresjList);

        jLabel5.setText("Suggested Procedures:");

        selectProcedurejButton.setText("Select Procedure");
        selectProcedurejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectProcedurejButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Time:");

        emergencyLocationjTextField.setEditable(false);

        nroOfPeoplejTextField.setEditable(false);

        jLabel7.setText("Single Person Emergency Information");

        patientAgejTextField.setEditable(false);

        patientGenderjTextField.setEditable(false);

        jLabel8.setText("Age:");

        jLabel9.setText("Gender:");

        taskActionjButton.setText("Start");
        taskActionjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskActionjButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(28, 28, 28)
                        .add(jLabel8)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel7)
                            .add(layout.createSequentialGroup()
                                .add(patientAgejTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel9)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(patientGenderjTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel5))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(layout.createSequentialGroup()
                                .add(selectProcedurejButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 63, Short.MAX_VALUE)
                                .add(taskActionjButton)
                                .add(39, 39, 39))
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 324, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel2)
                                    .add(jLabel3)
                                    .add(jLabel6))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(emergencyTimejTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                                    .add(emergencyLocationjTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                                    .add(emergencyTypejTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)))
                            .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .add(layout.createSequentialGroup()
                                .add(jLabel4)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(nroOfPeoplejTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE))))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 304, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(38, 38, 38))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(emergencyTimejTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(emergencyLocationjTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(emergencyTypejTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(nroOfPeoplejTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(1, 1, 1)
                .add(jLabel7)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(patientAgejTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel8)
                    .add(jLabel9)
                    .add(patientGenderjTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(2, 2, 2)
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 161, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(selectProcedurejButton)
                    .add(taskActionjButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void selectProcedurejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectProcedurejButtonActionPerformed
        ObjectOutputStream out = null;
        try {
            int[] selected = suggestedProceduresjList.getSelectedIndices();
            SelectedProcedures selectedProcedures = new SelectedProcedures(emergencyId);
            for(int i = 0; i > suggestedProcedures.size(); i++){
                selectedProcedures.addSelectedProcedureName(suggestedProceduresjList.getComponent(selected[i]).getName());
            }
            Map<String, Object> info = new HashMap<String, Object>();
            info.put("selectedProcedures", selectedProcedures);
            

            ContentData result = new ContentData();
            result.setAccessType(AccessType.Inline);
            result.setType("java.util.Map");
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            out = new ObjectOutputStream(bos);
            out.writeObject(info);
            out.close();
            result.setContent(bos.toByteArray());
           
            this.parent.getTaskClient().setAuthorizedEntityId("control");
            this.parent.getTaskClient().complete(this.taskId, result);
            

            this.parent.hideDialog();

        } catch (IllegalArgumentFault ex) {
            Logger.getLogger(EmergencyMinimalQuestionnairePanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalStateFault ex) {
            Logger.getLogger(EmergencyMinimalQuestionnairePanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessFault ex) {
            Logger.getLogger(EmergencyMinimalQuestionnairePanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(UserTaskListUI.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(UserTaskListUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
    }//GEN-LAST:event_selectProcedurejButtonActionPerformed

    private void taskActionjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskActionjButtonActionPerformed
        try {
            TTask task = this.parent.getTaskClient().getTaskInfo(taskId);
            TStatus status = task.getStatus();
            String statusName = status.name();
            System.out.println("Status of the TASK = "+statusName);
            //@TODO: check the status and show or not the button!
        } catch (IllegalArgumentFault ex) {
            Logger.getLogger(EmergencyMinimalQuestionnairePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.parent.getTaskClient().setAuthorizedEntityId("operator");
        try {
            this.parent.getTaskClient().start(taskId);
        } catch (IllegalArgumentFault ex) {
            Logger.getLogger(EmergencyMinimalQuestionnairePanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalStateFault ex) {
            Logger.getLogger(EmergencyMinimalQuestionnairePanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessFault ex) {
            Logger.getLogger(EmergencyMinimalQuestionnairePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        taskActionjButton.setText("Started...");
        taskActionjButton.setEnabled(false);
    }//GEN-LAST:event_taskActionjButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField emergencyLocationjTextField;
    private javax.swing.JTextField emergencyTimejTextField;
    private javax.swing.JTextField emergencyTypejTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField nroOfPeoplejTextField;
    private javax.swing.JTextField patientAgejTextField;
    private javax.swing.JTextField patientGenderjTextField;
    private javax.swing.JButton selectProcedurejButton;
    private javax.swing.JList suggestedProceduresjList;
    private javax.swing.JButton taskActionjButton;
    // End of variables declaration//GEN-END:variables

    private void configurePanel() {
        String taskinfo = "";

        try {
            ObjectInputStream ois = null;


            List<TTaskAbstract> taskAbstracts = this.parent.getTaskClient().getMyTaskAbstracts("", "control", "", null, "", "", "", 0, 0);
            TTaskAbstract taskAbstract = taskAbstracts.get(0);



            List<TAttachmentInfo> attachmentsInfo = this.parent.getTaskClient().getAttachmentInfos(taskAbstract.getId());
            TAttachmentInfo firstAttachmentInfo = attachmentsInfo.get(0);
            TAttachment attachment = this.parent.getTaskClient().getAttachments(taskAbstract.getId(), firstAttachmentInfo.getName()).get(0);

            ByteArrayInputStream bais = new ByteArrayInputStream(((Content) attachment.getValue()).getContent());
            ois = new ObjectInputStream(bais);
            taskinfo = (String) ois.readObject();
        } catch (Exception ex) {
            Logger.getLogger(UserTaskListUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        String[] values = taskinfo.split(",");
        System.out.println("TaskInfo = " + taskinfo);
        emergencyId = Long.valueOf(values[0].trim());
        String emergencyType = values[1].trim();
        String emergencyLocationX = values[2].trim();
        String emergencyLocationY = values[3].trim();
        String emergencyDate = values[4].trim();
        String phoneNumber = values[5].trim();
        String emergencyNroOfPeople = values[6].trim();
        emergencyTimejTextField.setText(emergencyDate);
        emergencyLocationjTextField.setText("X: "+emergencyLocationX +" - Y:"+emergencyLocationY);
        emergencyTypejTextField.setText(emergencyType);
        nroOfPeoplejTextField.setText(emergencyNroOfPeople);
        
        String patientAge = "";
        String patientGender = "";
        
        if (emergencyNroOfPeople.equals("1")) {
            patientAge = values[7].trim();
            patientGender = values[8].trim();
            patientAgejTextField.setText(patientAge);
            patientGenderjTextField.setText(patientGender);
        }

        String suggestedProceduresString = values[9].trim();
        if (suggestedProceduresString != null && !suggestedProceduresString.equals("")) {
            suggestedProcedures = getSuggestedProceduresNames(suggestedProceduresString);
            for(int i = 0; i < suggestedProcedures.size() -1; i++){
                ((DefaultListModel)suggestedProceduresjList.getModel()).add(i, suggestedProcedures.get(i));
            }
        }
        


    }

    public List<String> getSuggestedProceduresNames(String suggestedProceduresString) {
        String[] namesArray = suggestedProceduresString.split(":");
        namesArray[0] = namesArray[0].split("\\[")[1];
        return Arrays.asList(namesArray);
    }
}
