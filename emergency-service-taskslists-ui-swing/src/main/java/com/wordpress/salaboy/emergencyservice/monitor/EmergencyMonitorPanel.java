/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EmergencyMonitorPanel.java
 *
 * Created on Apr 28, 2011, 10:43:44 PM
 */
package com.wordpress.salaboy.emergencyservice.monitor;

import com.wordpress.salaboy.messaging.MessageConsumerWorker;
import com.wordpress.salaboy.messaging.MessageConsumerWorkerHandler;
import com.wordpress.salaboy.model.messages.HeartBeatMessage;
import com.wordpress.salaboy.model.messages.VehicleHitsCornerMessage;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.WindowConstants;

/**
 *
 * @author esteban
 */
public class EmergencyMonitorPanel extends javax.swing.JPanel {
    private ImageIcon map;
    private MessageConsumerWorker gpsWorker;
    private MessageConsumerWorker heartBeatWorker;
    private Long callId;

    /** Creates new form EmergencyMonitorPanel */
    public EmergencyMonitorPanel(Long callId) {
        this.callId = callId;
        
        initComponents();
        
        loadMapImage();
        
        startQueueListeners();
        
        startPulseEmulator();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lblMap = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();

        jPanel1.setName("GPS"); // NOI18N

        lblMap.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblMap.setPreferredSize(new java.awt.Dimension(305, 208));

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClear)
                    .addComponent(lblMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnClear)
                .addGap(110, 110, 110))
        );

        jTabbedPane.addTab("GPS", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        this.loadMapImage();
    }//GEN-LAST:event_btnClearActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JLabel lblMap;
    // End of variables declaration//GEN-END:variables

    private void startQueueListeners(){
        gpsWorker = new MessageConsumerWorker("vehicleGPS", new MessageConsumerWorkerHandler<VehicleHitsCornerMessage>() {

            @Override
            public void handleMessage(VehicleHitsCornerMessage message) {
                if (message.getCallId().equals(callId)){
                    paintVehiclePosition(message.getVehicleId(), message.getCornerX(), message.getCornerY());
                }
            }
        });
        
        heartBeatWorker = new MessageConsumerWorker("vehicleHeartBeat", new MessageConsumerWorkerHandler<HeartBeatMessage>() {

            @Override
            public void handleMessage(HeartBeatMessage message) {
                if (message.getCallId().equals(callId)){
                    processHeartBeat(message.getVehicleId(), message.getHeartBeatValue(), message.getTime());
                }
            }
            
        });
        
        gpsWorker.start();
        heartBeatWorker.start();
    }
    
    private Map<Long, Point> lastVehiclePosition = new HashMap<Long, Point>();
    private Map<Long, Color> vehicleColors = new HashMap<Long, Color>();
    private Color[] colors = {Color.BLUE,Color.YELLOW, Color.RED, Color.GREEN, Color.ORANGE, Color.PINK};
    private void paintVehiclePosition(Long vehicleId, int x, int y){
        x = x/2;
        y = y/2;
        
        if (!lastVehiclePosition.containsKey(vehicleId)){
            lastVehiclePosition.put(vehicleId, new Point(x, y) );
            vehicleColors.put(vehicleId, colors[vehicleColors.size()]);
            return;
        }
        
        
        Point lastPoint = lastVehiclePosition.get(vehicleId);
        Graphics graphics = lblMap.getGraphics();
        graphics.setColor(vehicleColors.get(vehicleId));
        graphics.drawLine(lastPoint.x,lastPoint.y,x, y);
        
        
        lastVehiclePosition.put(vehicleId, new Point(x, y) );
    }
    
    public void cleanupPanel(){
        
        stopPulseEmulator = true;
        
        if (heartBeatWorker != null){
            heartBeatWorker.stopWorker();
        }
        if (gpsWorker != null){
            gpsWorker.stopWorker();
        }
    }
    
    private void loadMapImage() {
        map = new ImageIcon(this.getClass().getClassLoader().getResource("png/CityMap.png"));
        this.lblMap.setIcon(map);
    }
    
    private Map<Long,HeartBeatWidget> heartBeatWidgets = new HashMap<Long, HeartBeatWidget>();
    private void processHeartBeat(Long vehicleId, double heartBeatValue, Date time) {
        if (!heartBeatWidgets.containsKey(vehicleId)){
            HeartBeatWidget widget = new HeartBeatWidget();
            jTabbedPane.add("Ambulance "+vehicleId,widget.getChartPanel());
            jTabbedPane.setSelectedComponent(widget.getChartPanel());
            heartBeatWidgets.put(vehicleId, widget);
        }
        
        heartBeatWidgets.get(vehicleId).updateMonitorGraph(heartBeatValue);
    }
    
    public static void main(String args[]){
        java.awt.EventQueue.invokeLater(new Runnable()    {

            @Override
            public void run() {
                JFrame jFrame = new JFrame();
                jFrame.add( new EmergencyMonitorPanel(0L));
                jFrame.setSize(400, 400);
                jFrame.setVisible(true);
                jFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
            }
        });
    }

    private boolean stopPulseEmulator = false;
    private void startPulseEmulator() {
        new Thread(){

            @Override
            public void run() {
                while (!stopPulseEmulator){
                    try {
                        for (HeartBeatWidget heartBeatWidget : heartBeatWidgets.values()) {
                            heartBeatWidget.updateMonitorGraph(235);
                        }
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(EmergencyMonitorPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            
        }.start();
    }
}
