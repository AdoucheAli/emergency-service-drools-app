/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EmergencyMonitorPanel.java
 *
 * Created on Apr 28, 2011, 10:43:44 PM
 */
package com.wordpress.salaboy.emergencyservice.monitor;

import com.wordpress.salaboy.messaging.MessageConsumerWorker;
import com.wordpress.salaboy.messaging.MessageConsumerWorkerHandler;
import com.wordpress.salaboy.messaging.MessageFactory;
import com.wordpress.salaboy.model.messages.VehicleDispatchedMessage;
import com.wordpress.salaboy.model.messages.patient.HeartBeatMessage;
import com.wordpress.salaboy.model.messages.VehicleHitsCornerMessage;
import com.wordpress.salaboy.model.messages.patient.PatientMonitorAlertMessage;
import com.wordpress.salaboy.util.AlertsIconListRenderer;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.WindowConstants;
import org.hornetq.api.core.HornetQException;

/**
 *
 * @author esteban
 */
public class EmergencyMonitorPanel extends javax.swing.JPanel {
    private ImageIcon map;
    private MessageConsumerWorker gpsWorker;
    private MessageConsumerWorker heartBeatWorker;
    private MessageConsumerWorker patientMonitorAlertWorker;
    private Long callId;
    private List<String> alerts = new ArrayList<String>(); 

    /** Creates new form EmergencyMonitorPanel */
    public EmergencyMonitorPanel(Long callId) {
        this.callId = callId;
        
        initComponents();
        
        loadMapImage();
        
        startQueueListeners();
        
        startPulseEmulator();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstAlerts = new javax.swing.JList();
        btnClear1 = new javax.swing.JButton();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lblMap = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Alerts"));

        lstAlerts.setPreferredSize(new java.awt.Dimension(200, 0));
        jScrollPane3.setViewportView(lstAlerts);
        lstAlerts.setCellRenderer(new AlertsIconListRenderer());

        btnClear1.setText("Clear");
        btnClear1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClear1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClear1)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClear1))
        );

        jPanel1.setName("GPS"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 200));

        lblMap.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblMap.setPreferredSize(new java.awt.Dimension(305, 208));

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear))
                .addContainerGap(101, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClear)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("GPS", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        this.loadMapImage();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnClear1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClear1ActionPerformed
        this.alerts.clear();
        DefaultListModel emptyModel = new DefaultListModel();
        this.lstAlerts.setModel(emptyModel);
    }//GEN-LAST:event_btnClear1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClear1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JLabel lblMap;
    private javax.swing.JList lstAlerts;
    // End of variables declaration//GEN-END:variables

    private void startQueueListeners(){
        gpsWorker = new MessageConsumerWorker("vehicleGPS"+callId, new MessageConsumerWorkerHandler<VehicleHitsCornerMessage>() {
            @Override
            public void handleMessage(VehicleHitsCornerMessage message) {
                if (message.getCallId().equals(callId)){
                    paintVehiclePosition(message.getVehicleId(), message.getCornerX(), message.getCornerY());
                }
            }
        });
        
        heartBeatWorker = new MessageConsumerWorker("vehicleHeartBeat"+callId, new MessageConsumerWorkerHandler<HeartBeatMessage>() {
            @Override
            public void handleMessage(HeartBeatMessage message) {
                if (message.getCallId().equals(callId)){
                    processHeartBeat(message.getVehicleId(), message.getHeartBeatValue(), message.getTime());
                }
            }
            
        });
        
        patientMonitorAlertWorker = new MessageConsumerWorker("patientMonitorAlerts"+callId, new MessageConsumerWorkerHandler<PatientMonitorAlertMessage>() {
            @Override
            public void handleMessage(PatientMonitorAlertMessage message) {
                if (message.getCallId().equals(callId)){
                    processPatientAlert(message.getVehicleId(), message.getTime(), message.getMessage());
                }
            }
            
        });
        
        patientMonitorAlertWorker.start();
        gpsWorker.start();
        heartBeatWorker.start();
    }
    
    private Map<Long, Point> lastVehiclePosition = new HashMap<Long, Point>();
    private Map<Long, Color> vehicleColors = new HashMap<Long, Color>();
    private Color[] colors = {Color.BLUE,Color.YELLOW, Color.RED, Color.GREEN, Color.ORANGE, Color.PINK};
    private void paintVehiclePosition(Long vehicleId, int x, int y){
        x = x/2;
        y = y/2;
        
        if (!lastVehiclePosition.containsKey(vehicleId)){
            lastVehiclePosition.put(vehicleId, new Point(x, y) );
            vehicleColors.put(vehicleId, colors[vehicleColors.size()]);
            return;
        }
        
        
        Point lastPoint = lastVehiclePosition.get(vehicleId);
        Graphics graphics = lblMap.getGraphics();
        graphics.setColor(vehicleColors.get(vehicleId));
        graphics.drawLine(lastPoint.x,lastPoint.y,x, y);
        
        
        lastVehiclePosition.put(vehicleId, new Point(x, y) );
    }
    
    public void cleanupPanel(){
        
        stopPulseEmulator = true;
        
        if (patientMonitorAlertWorker != null){
            patientMonitorAlertWorker.stopWorker();
        }
        if (heartBeatWorker != null){
            heartBeatWorker.stopWorker();
        }
        if (gpsWorker != null){
            gpsWorker.stopWorker();
        }
    }
    
    private void loadMapImage() {
        map = new ImageIcon(this.getClass().getClassLoader().getResource("png/CityMap.png"));
        this.lblMap.setIcon(map);
    }
    
    private Map<Long,HeartBeatWidget> heartBeatWidgets = new ConcurrentHashMap<Long, HeartBeatWidget>();
    private void processHeartBeat(Long vehicleId, double heartBeatValue, Date time) {
        if (!heartBeatWidgets.containsKey(vehicleId)){
            HeartBeatWidget widget = new HeartBeatWidget();
            jTabbedPane.add("Ambulance "+vehicleId,widget.getChartPanel());
            jTabbedPane.setSelectedComponent(widget.getChartPanel());
            heartBeatWidgets.put(vehicleId, widget);
        }
        
        heartBeatWidgets.get(vehicleId).updateMonitorGraph(heartBeatValue);
    }
    
    private void processPatientAlert(Long vehicleId, Date time, String message) {
        alerts.add(0,vehicleId+" - " +message);
        
        DefaultListModel model = new DefaultListModel();
        for (String alert : alerts) {
            model.addElement(alert);
        }
        lstAlerts.setModel(model);
        this.validate();
    }
    
    public static void main(String args[]) throws HornetQException{
        //PatientMonitorService.getInstance().newVehicleDispatched(0L, 0L);
        MessageFactory.sendMessage(new VehicleDispatchedMessage(0L, 0L));
        java.awt.EventQueue.invokeLater(new Runnable()    {

            @Override
            public void run() {
                JFrame jFrame = new JFrame();
                jFrame.add( new EmergencyMonitorPanel(0L));
                jFrame.setSize(400, 400);
                jFrame.setVisible(true);
                jFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
            }
        });
    }

    private boolean stopPulseEmulator = false;
    private void startPulseEmulator() {
        new Thread(){

            @Override
            public void run() {
                while (!stopPulseEmulator){
                    try {
                        for (Long vehicleId : heartBeatWidgets.keySet()) {
                            try {
                                MessageFactory.sendMessage(new HeartBeatMessage(callId, vehicleId, 235, new Date()));
                            } catch (HornetQException ex) {
                                Logger.getLogger(EmergencyMonitorPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(EmergencyMonitorPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            
        }.start();
    }
}
