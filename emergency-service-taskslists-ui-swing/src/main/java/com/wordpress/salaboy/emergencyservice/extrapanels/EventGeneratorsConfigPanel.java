/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EventGeneratorsConfigPanel.java
 *
 * Created on Dec 23, 2010, 6:27:03 PM
 */

package com.wordpress.salaboy.emergencyservice.extrapanels;

import com.intel.bluetooth.BlueCoveConfigProperties;
import com.intel.bluetooth.BlueCoveImpl;
import com.wordpress.salaboy.emergencyservice.main.UserTaskListUI;
import com.wordpress.salaboy.emergencyservice.taskslist.swing.wiimote.SimpleMoteFinder;
import com.wordpress.salaboy.emergencyservice.taskslist.swing.wiimote.WiiMoteOptions;
import com.wordpress.salaboy.model.CityEntities;
import com.wordpress.salaboy.messaging.MessageConsumerWorker;
import com.wordpress.salaboy.messaging.MessageConsumerWorkerHandler;
import com.wordpress.salaboy.messaging.MessageFactory;
import com.wordpress.salaboy.model.Ambulance;
import com.wordpress.salaboy.model.messages.patient.HeartBeatMessage;
import java.lang.String;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import motej.Mote;
import motej.StatusInformationReport;
import motej.event.AccelerometerEvent;
import motej.event.AccelerometerListener;
import motej.event.CoreButtonEvent;
import motej.event.CoreButtonListener;
import motej.event.MoteDisconnectedEvent;
import motej.event.MoteDisconnectedListener;
import motej.event.StatusInformationListener;
import motej.request.ReportModeRequest;
import org.hornetq.api.core.HornetQException;

/**
 * @author salaboy
 * @author esteban
 */
public class EventGeneratorsConfigPanel extends javax.swing.JPanel {

    /** Creates new form EventGeneratorsConfigPanel */
    public EventGeneratorsConfigPanel() {
        initComponents();
        
        JComboBox combo = new JComboBox();
        Collection<List<Ambulance>> ambulances = CityEntities.ambulances.values();
        for (List<Ambulance> listOfAmbulances : ambulances) {
            for (Ambulance ambulance : listOfAmbulances) {
                String item = "Ambulance - " + ambulance.getId();
                combo.addItem(item);
            }
        }
        
       
        
        //Heart Beat Received
            MessageConsumerWorker heartBeatReceivedWorker = new MessageConsumerWorker("heartBeatWiiMote",new MessageConsumerWorkerHandler<HeartBeatMessage>() {
                @Override
                public void handleMessage(HeartBeatMessage message) {
                    outputjTextArea.insert(System.currentTimeMillis()+" - sended " + message.getHeartBeatValue() + " heartbeat\n", 0);
                }
            });
            heartBeatReceivedWorker.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnWiiMoteLookup = new javax.swing.JButton();
        btnStopWiiMoteLookup = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputjTextArea = new javax.swing.JTextArea();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Wii Mote Bindings", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        btnWiiMoteLookup.setText("Start WiiMote Binding");
        btnWiiMoteLookup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWiiMoteLookupActionPerformed(evt);
            }
        });

        btnStopWiiMoteLookup.setText("Stop WiiMote");
        btnStopWiiMoteLookup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopWiiMoteLookupActionPerformed(evt);
            }
        });

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnWiiMoteLookup)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnStopWiiMoteLookup, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnWiiMoteLookup)
                    .addComponent(btnStopWiiMoteLookup)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Output", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        outputjTextArea.setColumns(20);
        outputjTextArea.setRows(5);
        jScrollPane2.setViewportView(outputjTextArea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnWiiMoteLookupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWiiMoteLookupActionPerformed
        // TODO add your handling code here:
        initWiiMote();
        
        
    }//GEN-LAST:event_btnWiiMoteLookupActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        outputjTextArea.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnStopWiiMoteLookupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopWiiMoteLookupActionPerformed
        // TODO add your handling code here:
        if(mote != null){
            mote.disconnect();
        }
        if( simpleMoteFinder != null){
            simpleMoteFinder.stopFind();
        }
        BlueCoveImpl.shutdown();
        BlueCoveImpl.shutdownThreadBluetoothStack();
        
        outputjTextArea.insert(System.currentTimeMillis()+" - Wii mote Disconnected By the user", 0);
    }//GEN-LAST:event_btnStopWiiMoteLookupActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStopWiiMoteLookup;
    private javax.swing.JButton btnWiiMoteLookup;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea outputjTextArea;
    // End of variables declaration//GEN-END:variables
    private Mote mote = null;
    private SimpleMoteFinder simpleMoteFinder;
    public static void main (String args[]){
        java.awt.EventQueue.invokeLater(new Runnable()    {

            @Override
            public void run() {
                JFrame jFrame = new JFrame();
                jFrame.add( new EventGeneratorsConfigPanel());
                jFrame.setSize(400, 500);
                jFrame.setVisible(true);
            }
        });
    }
    
    
     private void initWiiMote() {
        System.setProperty(BlueCoveConfigProperties.PROPERTY_JSR_82_PSM_MINIMUM_OFF, "true");
        
        simpleMoteFinder = new SimpleMoteFinder();
        mote = simpleMoteFinder.findMote();
        if(mote == null){
            outputjTextArea.insert(System.currentTimeMillis()+" - Wii mote not found! \n", 0);
            
        }
        else{
            outputjTextArea.insert(System.currentTimeMillis()+" - Wii mote found! \n", 0);
        }
        AccelerometerListener<Mote> listener = new AccelerometerListener<Mote>()   {

            @Override
            public void accelerometerChanged(AccelerometerEvent<Mote> evt) {
                
                if (evt.getY() > 225) {
                    
                    try {
                        Long callId = UserTaskListUI.LAST_CALL_ID;
                        Long vehicleId = UserTaskListUI.LAST_DISPATCHED_VEHICLE_ID;
                        if (callId != null && vehicleId != null){
                            MessageFactory.sendMessage(new HeartBeatMessage(callId, vehicleId, evt.getY(), new Date()));                  
                        }
                    } catch (HornetQException ex) {
                        Logger.getLogger(WiiMoteOptions.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    
                }
            }
            
        };
        MoteDisconnectedListener<Mote> disconnectedListener = new MoteDisconnectedListener<Mote>(){

            @Override
            public void moteDisconnected(MoteDisconnectedEvent<Mote> mde) {
                outputjTextArea.insert(System.currentTimeMillis()+" - Wii MOTE DISCONECTED!!!!\n", 0);
            }

        };
        
        CoreButtonListener buttonListener = new CoreButtonListener() {

            public void buttonPressed(CoreButtonEvent cbe) {
                if(cbe.isButtonAPressed()){
                    outputjTextArea.insert(System.currentTimeMillis()+" - Button A Pressed!\n",0);
                }
                if(cbe.isButtonBPressed()){
                    outputjTextArea.insert(System.currentTimeMillis()+" - Button B Pressed!\n",0);
                }
            }
        };
        
        StatusInformationListener statusListener = new StatusInformationListener() {

            public void statusInformationReceived(StatusInformationReport sir) {
                
            }
        };
        //mote.addStatusInformationListener(statusListener);
        mote.setReportMode(ReportModeRequest.DATA_REPORT_0x31);
        mote.addMoteDisconnectedListener(disconnectedListener);
        mote.addAccelerometerListener(listener);
        mote.addCoreButtonListener(buttonListener);

    }
    
}
