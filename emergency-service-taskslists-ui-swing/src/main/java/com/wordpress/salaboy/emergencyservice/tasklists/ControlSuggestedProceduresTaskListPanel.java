/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PhoneCallsPanel.java
 *
 * Created on Nov 24, 2010, 3:15:17 PM
 */
package com.wordpress.salaboy.emergencyservice.tasklists;

import com.wordpress.salaboy.emergencyservice.tasklists.refreshhelpers.UIJTableRefreshManager;
import com.wordpress.salaboy.emergencyservice.tasklists.refreshhelpers.Refreshable;
import com.wordpress.salaboy.emergencyservice.main.UserTaskListUI;
import com.wordpress.salaboy.emergencyservice.taskforms.SuggestedProceduresTaskFormPanel;
import com.wordpress.salaboy.api.HumanTaskService;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.table.DefaultTableModel;
import org.example.ws_ht.api.wsdl.IllegalAccessFault;
import org.example.ws_ht.api.wsdl.IllegalArgumentFault;
import org.example.ws_ht.api.wsdl.IllegalStateFault;
import org.jbpm.task.Content;
import com.wordpress.salaboy.model.Emergency.EmergencyType;
import org.example.ws_ht.api.TAttachment;
import org.example.ws_ht.api.TAttachmentInfo;
import org.example.ws_ht.api.TTaskAbstract;

/**
 *
 * @author esteban
 */
public class ControlSuggestedProceduresTaskListPanel extends javax.swing.JPanel implements Refreshable {

    private UserTaskListUI parent;
    
    //the list of tasks
    private List<TTaskAbstract> taskAbstracts;

    /** Creates new form PhoneCallsPanel */
    public ControlSuggestedProceduresTaskListPanel(UserTaskListUI parent) {
        this.parent = parent;
        initComponents();
    }
    
    protected HumanTaskService getTaskClient(){
        return this.parent.getTaskClient();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        phoneCallsJScrollPane = new javax.swing.JScrollPane();
        ambulanceControlsJTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        refreshJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        ftxt_refreshSeconds = new javax.swing.JFormattedTextField();
        chk_autoRefresh = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Control Suggested Procedures Task List", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        setName("Control Procedures Expert"); // NOI18N
        setPreferredSize(new java.awt.Dimension(325, 412));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tasks List", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        ambulanceControlsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id","Incoming Call",
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Number.class,
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        ambulanceControlsJTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        ambulanceControlsJTable.setName("Control Operator"); // NOI18N
        ambulanceControlsJTable.getTableHeader().setReorderingAllowed(false);
        ambulanceControlsJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ambulanceControlsJTablerowClick(evt);
            }
        });
        phoneCallsJScrollPane.setViewportView(ambulanceControlsJTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(phoneCallsJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(phoneCallsJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Actions", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("secs");

        ftxt_refreshSeconds.setText("3");

        chk_autoRefresh.setText("auto refresh");
        chk_autoRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_autoRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(refreshJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ftxt_refreshSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chk_autoRefresh)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(refreshJButton)
                .addComponent(ftxt_refreshSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel1)
                .addComponent(chk_autoRefresh))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ambulanceControlsJTablerowClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ambulanceControlsJTablerowClick
        //System.out.println("ID from EVT"+evt.getID());
        int selected = ambulanceControlsJTable.rowAtPoint(evt.getPoint());
        String id = this.taskAbstracts.get(selected).getId();
        this.emergencyProcedureSuggestionSelected(id);

    }//GEN-LAST:event_ambulanceControlsJTablerowClick

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        this.refresh();
}//GEN-LAST:event_refreshJButtonActionPerformed

    private void chk_autoRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_autoRefreshActionPerformed
        if (chk_autoRefresh.isSelected()) {
            UIJTableRefreshManager.start(chk_autoRefresh, Integer.valueOf(ftxt_refreshSeconds.getText()), this);
        }
    }//GEN-LAST:event_chk_autoRefreshActionPerformed

    public void refresh() {


        try {
            taskAbstracts = this.parent.getTaskClient().getMyTaskAbstracts("", "control", "", null, "", "", "", 0, 0);
        } catch (IllegalArgumentFault ex) {
            Logger.getLogger(ControlSuggestedProceduresTaskListPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalStateFault ex) {
            Logger.getLogger(ControlSuggestedProceduresTaskListPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

       
        DefaultTableModel tableModel = ((DefaultTableModel) ambulanceControlsJTable.getModel());

        int rowCount = tableModel.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            tableModel.removeRow(0);
        }

        int i = 0;
        for (TTaskAbstract taskAbstract : taskAbstracts) {
            String name = taskAbstract.getName().toString();
            tableModel.addRow(new Object[]{++i, name});
        }
        
        ambulanceControlsJTable.getColumnModel().getColumn(0).setMaxWidth(25);
    }
    private JDialog callPopup;

    public void emergencyProcedureSuggestionSelected(String id) {

       
        
        SuggestedProceduresTaskFormPanel suggestedProcedures = new SuggestedProceduresTaskFormPanel(this, getTaskClient(), id);
        
        callPopup = new JDialog(this.parent, "Info", true);
        callPopup.add(suggestedProcedures);
        this.callPopup.setSize(320, 470);
        this.callPopup.setVisible(true);
        this.callPopup.requestFocus();
    }

//    public void sendAmbulance() throws IOException, ClassNotFoundException, IllegalArgumentFault, IllegalStateFault, IllegalAccessFault {
//        this.callPopup.setVisible(false);
//
//        //TODO: get(0) !!
//        List<TTaskAbstract> taskAbstracts = this.parent.getTaskClient().getMyTaskAbstracts("", "control", "", null, "", "", "", 0, 0);
//        TTaskAbstract taskAbstract = taskAbstracts.get(0);
//
//        this.parent.getTaskClient().setAuthorizedEntityId("control");
//        this.parent.getTaskClient().start(taskAbstract.getId());
//
//
//        List<TAttachmentInfo> attachmentsInfo = this.parent.getTaskClient().getAttachmentInfos(taskAbstract.getId());
//        TAttachmentInfo firstAttachmentInfo = attachmentsInfo.get(0);
//        TAttachment attachment = this.parent.getTaskClient().getAttachments(taskAbstract.getId(), firstAttachmentInfo.getName()).get(0);
//
//        System.out.println("Content= " + attachment.getValue());
//
//
//        ByteArrayInputStream bais = new ByteArrayInputStream(((Content) attachment.getValue()).getContent());
//
//        ObjectInputStream ois = new ObjectInputStream(bais);
//        //#{doctor.id}, #{ambulance.id},  #{patient.id}, #{patient.name}, #{patient.age}, #{patient.gender}, #{emergency.location}, #{emergency.type}
//        String[] taskinfo = ((String) ois.readObject()).split(",");
//
//        Long ambulanceId = Long.valueOf(taskinfo[1].trim());
//
//        this.parent.getTaskClient().setAuthorizedEntityId("control");
//        this.parent.getTaskClient().complete(taskAbstract.getId(), null);
//
//        this.parent.sendAmbulance(EmergencyType.valueOf(taskinfo[7].trim()), ambulanceId);
//    }
    
    public void hideDialog(){
        this.callPopup.setVisible(false);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ambulanceControlsJTable;
    private javax.swing.JCheckBox chk_autoRefresh;
    private javax.swing.JFormattedTextField ftxt_refreshSeconds;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane phoneCallsJScrollPane;
    private javax.swing.JButton refreshJButton;
    // End of variables declaration//GEN-END:variables
}
